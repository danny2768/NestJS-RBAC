// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  userRoles UserRole[] // Many-to-many relationship with Role
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  hierarchy   Int
  userRoles   UserRole[] // Many-to-many relationship with User
  permissions RolePermission[] // Many-to-many relationship with Permission
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  displayName String
  roles       RolePermission[] // Many-to-many relationship with Role
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}
